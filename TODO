util:
  port infinity utils from strokedb mainline (used in pretty finder views API)
repositories:
  refactor decode/encode stuff into layers (as in views)
  repo syncing
    write ahead log
  abstract async api
  tokyocabinet iterators
  json dump backend
  raw uuid storage (+uuid conversion)
views:
  specs for all layers!
  on memory view
  abstract api
  connect with repository
    async view update API
concurrency:
  thread-safe wrapper for repositories (include Mutex_m)
networking:
  rpc lib:
    port here from the lfgr project
    add support for passing object references to remote peer
  abstract async api
  async/sync rpc api:
    for repositories
    for views
StrokeObjects (collection of OO APIs):
  classes (like ActiveRecord)
  callbacks
    validations
  repository-local validations
    >> think on modular decomposed models
  metas
    detection from constants
  autoload (lazy_mapping_array and such stuff)
    refactor LMA, LMH: use inheritance instead of alias() and procs:
      LMA
      LMH
  nsurl
associations:
  identity map in a repository (versions' equality must imply object_id's equality)
  auto views
    has one
    has many
validations:
  networking:
    transferrable validations (don't repeat presence_of on server if client already checked, but check uniqueness_of)
admin tasks:
  rcov
  rdoc
  